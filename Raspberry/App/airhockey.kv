#:import Transition kivy.uix.screenmanager.SlideTransition

<RootWidget>:
	id: rootWidget
	orientation: 'vertical'

	dateTimeString: ""
	cameraFps: 0
	detectingFps: 0
	gameFrequency: 0
	colorTheme: [0, 0, 0, 1]
	
	BoxLayout:
		id: mainPanel

		BoxLayout:
			id: navigationPanel
			orientation: 'vertical'
			size_hint_x: None
			padding: [10, 20]
			# spacing: 20
			width: round(root.height - statusPanel.height)/4		
			pos: mainPanel.pos
			
			NavigationButton:
				id: playScreenButton
				text: 'Play'
				on_press: root.changeScreen("playScreen")
			NavigationButton:
				id: settingsScreenButton
				text: 'Settings'
				on_press: root.changeScreen("settingsScreen")
			NavigationButton:
				id: cameraScreenButton
				text: 'Camera'
				on_press: root.changeScreen("cameraScreen")
			NavigationButton:
				id: infoScreenButton
				text: 'Info'
				on_press: root.changeScreen("infoScreen")

		ScreenManager:
			id: screenManager
			pos: mainPanel.pos
			transition: Transition(direction = "up")

			PlayScreen:
			SettingsScreen:
			CameraScreen:
				id: cameraScreen
			InfoScreen:		

	BoxLayout:
		id: statusPanel
		size_hint_y: None
		height: 40

		Label:
			text: 'Peripheral status'
		BoxLayout:
			size_hint: 3, 1
			Label:
				text: "Capturing: " + str(round(root.cameraFps)) + "fps"
			Label:
				text: "Detecting: " + str(round(root.detectingFps)) + "fps"
			Label:
				text: "Frequency: " + str(round(root.gameFrequency)) + "Hz"
		Label:
			text: root.dateTimeString


<PlayScreen@Screen>:
	name: "playScreen"
	BoxLayout:
		orientation: "vertical"
		Label:			
			text: "Score: " #app.root.game.score[0] + ":" + app.root.game.score[1]

		BoxLayout:
			spacing: 50
			padding: [(self.width - 1*self.spacing - 2*self.height)/2 , 0]
			size_hint: 1, None
			height: 100

			RoundedButton:
				text: "Start game"
				on_release: app.root.game.start()		

			RoundedButton:
				text: "Stop game"
				on_release: app.root.game.stop()
		Widget:	
			size_hint: 1, None
			height: 70


		

<SettingsScreen@Screen>:
	name: "settingsScreen"
	Label:
		text: self.parent.name

<CameraScreen@Screen>:
	name: 'cameraScreen'
	puckPos: (0, 0)
	colorToDetect: (0, 255, 255)
	cameraResolution: (320, 192)
	fieldCorners: (0,0,0,0,0,0,0,0)
	isConnected: False
	
	BoxLayout:
		padding: 10
		# spacing: 10
		orientation: 'vertical'
		BoxLayout:
			# padding: 10
			# spacing: 10
			size_hint: 1, None
			height: 60
			RoundedButton: 
				text: "Overview"
			RoundedButton: 
				text: "Lock AWB"
				on_release: app.root.camera.startLockingAwb()
			RoundedButton: 
				text: "Find field"
				on_release: app.root.camera.startFindingField()
			RoundedButton: 
				text: "Analyze color"
				on_release: app.root.camera.startAnalyzing()
		Image:
			id: cameraStream
			allow_stretch: root.isConnected
			keep_ratio: not root.isConnected
			source: "icons/no-video.png"
			texture: self.texture

			canvas.after:
				Color:
					rgba: [0,1,0,1]
				Line:
					points: root.fieldCorners
					width: 2
					close: True

				Color:
					rgba: [1,1,1,1]
				Line:
					id: puck
					circle: [root.puckPos[0], root.puckPos[1], 20]
					width: 2
				


				Color:
					hsv: root.colorToDetect
				Ellipse:
					pos: [self.x + self.width - 50, self.y + 20]
					size: [30, 30]

		BoxLayout:
			size_hint: 1, None
			height: 30
			RoundedButton: 
				text: "Start Camera"
				on_release: app.root.initializeCamera()
			RoundedButton: 
				text: "Stop Camera"
				on_release: app.root.camera.stopCamera()


<InfoScreen@Screen>:
	name: "infoScreen"
	Label:
		text: self.parent.name

# <StatusBar>:
# 	size_hint_y: None
# 	height: 50
# 	Label:
# 		text: 'default'


# <Widget>:
# 	color: [0, 0, 0, 1]
# 	canvas.before:
# 		Color:
# 			rgba: [.7, .7, .7, 1]
# 		Rectangle:
# 			size: self.size
# 			pos: self.pos

# <BoxLayout>:
# 	canvas.before:
# 		Color:
# 			rgba: [1,0,0,1]
# 		Line:
#             width: 2
#             rectangle: self.x, self.y, self.width, self.height

# <FloatLayout>:
# 	canvas.before:
# 		Color:
# 			rgba: [0,0,1,1]
# 		Line:
#             width: 2
#             rectangle: self.x, self.y, self.width, self.height


# <Button>:
# 	color: [0, 0, 0, 1]
# 	background_color: [.8, .8, .8, 1]
# 	background_normal: ""

	# canvas:
	# 	Color:
	# 		rgba: [0, 0, 1, 1]
	# 	Line:
    #         width: 2
    #         rectangle: self.x, self.y, self.width, self.height

<Label>:
	color: [0, 0, 0, 1]
	# canvas.before:		
		# Color:
		# 	rgba: [1, 0, 0, 1]
		# Line:
        #     width: 2
        #     rectangle: self.x, self.y, self.width, self.height





<RoundedButton@Button>:
	# background_color: [.8, .8, .8, .5]
	background_color: [0, 0, 0, 0]
	background_normal: ""
	buttonColor: [.8, .8, .8, 1]

	canvas.before:
		Color:
			rgba: self.buttonColor if self.state == 'normal' else app.root.colorTheme
		RoundedRectangle:
			pos: self.pos
			size: self.size
			radius: [min(self.size[0]/2, self.size[1]/2),]


<NavigationButton@Button>:
	# background_color: [.8, .8, .8, .5]
	background_color: [0, 0, 0, 0]
	background_normal: ""
	buttonColor: [.8, .8, .8, 1]

	sizeGain: 0.8
	canvas.before:
		Color:
			rgba: self.buttonColor
		Ellipse:
			size: [self.size[1] * self.sizeGain, self.size[1] * self.sizeGain]
			pos: [self.center_x - self.size[1]*self.sizeGain/2,  self.center_y - self.size[1]*self.sizeGain/2]




